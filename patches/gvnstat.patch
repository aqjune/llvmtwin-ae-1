From 754cc1df3510b217003680bb1d3fc29476975c68 Mon Sep 17 00:00:00 2001
From: aqjune <aqjune@gmail.com>
Date: Tue, 7 Nov 2017 17:22:21 +0900
Subject: [PATCH] Add GVN stats

---
 lib/Transforms/Scalar/GVN.cpp | 41 ++++++++++++++++++++++++++++++++++-
 1 file changed, 40 insertions(+), 1 deletion(-)

diff --git a/lib/Transforms/Scalar/GVN.cpp b/lib/Transforms/Scalar/GVN.cpp
index 593aad74bd1..52eb39dada7 100644
--- a/lib/Transforms/Scalar/GVN.cpp
+++ b/lib/Transforms/Scalar/GVN.cpp
@@ -33,11 +33,13 @@
 #include "llvm/Analysis/GlobalsModRef.h"
 #include "llvm/Analysis/InstructionSimplify.h"
 #include "llvm/Analysis/LoopInfo.h"
+#include "llvm/Analysis/Loads.h"
 #include "llvm/Analysis/MemoryBuiltins.h"
 #include "llvm/Analysis/MemoryDependenceAnalysis.h"
 #include "llvm/Analysis/OptimizationDiagnosticInfo.h"
 #include "llvm/Analysis/PHITransAddr.h"
 #include "llvm/Analysis/TargetLibraryInfo.h"
+#include "llvm/Analysis/ValueTracking.h"
 #include "llvm/IR/Attributes.h"
 #include "llvm/IR/BasicBlock.h"
 #include "llvm/IR/CallSite.h"
@@ -89,7 +91,11 @@ STATISTIC(NumGVNLoad,   "Number of loads deleted");
 STATISTIC(NumGVNPRE,    "Number of instructions PRE'd");
 STATISTIC(NumGVNBlocks, "Number of blocks merged");
 STATISTIC(NumGVNSimpl,  "Number of instructions simplified");
-STATISTIC(NumGVNEqProp, "Number of equalities propagated");
+STATISTIC(NumGVNEqProp, "Number_of_equalities_propagated");
+STATISTIC(NumGVNPtrEqProp, "Number_of_pointer_equalities_propagated");
+STATISTIC(NumGVNPtrLogicalDerefEqProp, "Number_of_logical_deref_pointer_equalities_propagated");
+STATISTIC(NumGVNPtrLogicalSameEqProp, "Number_of_same_base_logical_pointer_equalities_propagated");
+STATISTIC(NumGVNNullPtrEqProp, "Number_of_null_pointer_equalities_propagated");
 STATISTIC(NumPRELoad,   "Number of loads PRE'd");
 
 static cl::opt<bool> EnablePRE("enable-pre",
@@ -1669,6 +1675,7 @@ bool GVN::replaceOperandsWithConsts(Instruction *Instr) const {
 /// value starting from the end of Root.Start.
 bool GVN::propagateEquality(Value *LHS, Value *RHS, const BasicBlockEdge &Root,
                             bool DominatesByEdge) {
+  Instruction *CxtI = isa<Instruction>(LHS) ? dyn_cast<Instruction>(LHS):nullptr;
   SmallVector<std::pair<Value*, Value*>, 4> Worklist;
   Worklist.push_back(std::make_pair(LHS, RHS));
   bool Changed = false;
@@ -1732,6 +1739,38 @@ bool GVN::propagateEquality(Value *LHS, Value *RHS, const BasicBlockEdge &Root,
 
       Changed |= NumReplacements > 0;
       NumGVNEqProp += NumReplacements;
+      if (LHS->getType()->isPtrOrPtrVectorTy()) {
+        NumGVNPtrEqProp += NumReplacements;
+        if (isa<ConstantPointerNull>(LHS) || isa<ConstantPointerNull>(RHS))
+          NumGVNNullPtrEqProp += NumReplacements;
+        else {
+          SmallVector<Value *, 4> Op0Bases, Op1Bases;
+          const DataLayout &DL = Root.getStart()->getModule()->
+                                  getDataLayout();
+          auto isLogical = [](Value *V) {
+            return isa<AllocaInst>(V) ||
+                   isNoAliasCall(V) ||
+                   (isa<GlobalValue>(V) && !isa<GlobalAlias>(V));
+          };
+          GetUnderlyingObjects(LHS, Op0Bases, DL, nullptr, 6);
+          GetUnderlyingObjects(RHS, Op1Bases, DL, nullptr, 6);
+          bool isOp0Logical = true, isOp1Logical = true;
+          for (size_t i = 0; i < Op0Bases.size(); i++)
+            isOp0Logical  = isOp0Logical && isLogical(Op0Bases[i]);
+          for (size_t i = 0; i < Op1Bases.size(); i++)
+            isOp1Logical  = isOp1Logical && isLogical(Op1Bases[i]);
+
+          if (isOp0Logical && isOp1Logical) {
+            if (Op0Bases.size() == 1 && Op1Bases.size() == 1 &&
+                Op0Bases[0] == Op1Bases[0]) {
+              NumGVNPtrLogicalSameEqProp += NumReplacements;
+            } else if (isSafeToLoadUnconditionally(LHS, 0, DL, CxtI, DT) &&
+                       isSafeToLoadUnconditionally(RHS, 0, DL, CxtI, DT)) {
+              NumGVNPtrLogicalDerefEqProp += NumReplacements;
+            }
+          }
+        }
+      }
     }
 
     // Now try to deduce additional equalities from this one. For example, if
-- 
2.17.0

